{"ast":null,"code":"var _jsxFileName = \"/Users/kartheekkodati/Desktop/ecommerce-demo/frontend/src/contexts/CartContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useState([]);\n\n  // Load cart from localStorage on initial render\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      setCartItems(JSON.parse(savedCart));\n    }\n  }, []);\n\n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      // Check if the item is already in the cart\n      const existingItem = prevItems.find(item => item.id === product.id);\n      if (existingItem) {\n        // If item exists, update quantity\n        return prevItems.map(item => item.id === product.id ? {\n          ...item,\n          quantity: item.quantity + quantity\n        } : item);\n      } else {\n        // If item doesn't exist, add it to the cart\n        return [...prevItems, {\n          ...product,\n          quantity\n        }];\n      }\n    });\n  };\n  const removeFromCart = productId => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n      ...item,\n      quantity\n    } : item));\n  };\n  const clearCart = () => {\n    setCartItems([]);\n  };\n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);\n  };\n  const getCartItemsCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cartItems,\n      addToCart,\n      removeFromCart,\n      updateQuantity,\n      clearCart,\n      getCartTotal,\n      getCartItemsCount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"jdONvkEabzLc64SbXgqXBHRMg9M=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","savedCart","localStorage","getItem","JSON","parse","setItem","stringify","addToCart","product","quantity","prevItems","existingItem","find","item","id","map","removeFromCart","productId","filter","updateQuantity","clearCart","getCartTotal","reduce","total","price","getCartItemsCount","count","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kartheekkodati/Desktop/ecommerce-demo/frontend/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  const [cartItems, setCartItems] = useState([]);\n  \n  // Load cart from localStorage on initial render\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      setCartItems(JSON.parse(savedCart));\n    }\n  }, []);\n  \n  // Save cart to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cartItems));\n  }, [cartItems]);\n  \n  const addToCart = (product, quantity = 1) => {\n    setCartItems(prevItems => {\n      // Check if the item is already in the cart\n      const existingItem = prevItems.find(item => item.id === product.id);\n      \n      if (existingItem) {\n        // If item exists, update quantity\n        return prevItems.map(item => \n          item.id === product.id \n            ? { ...item, quantity: item.quantity + quantity } \n            : item\n        );\n      } else {\n        // If item doesn't exist, add it to the cart\n        return [...prevItems, { ...product, quantity }];\n      }\n    });\n  };\n  \n  const removeFromCart = (productId) => {\n    setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n  };\n  \n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    \n    setCartItems(prevItems => \n      prevItems.map(item => \n        item.id === productId ? { ...item, quantity } : item\n      )\n    );\n  };\n  \n  const clearCart = () => {\n    setCartItems([]);\n  };\n  \n  const getCartTotal = () => {\n    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n  \n  const getCartItemsCount = () => {\n    return cartItems.reduce((count, item) => count + item.quantity, 0);\n  };\n  \n  return (\n    <CartContext.Provider value={{ \n      cartItems, \n      addToCart, \n      removeFromCart, \n      updateQuantity, \n      clearCart, \n      getCartTotal,\n      getCartItemsCount\n    }}>\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}