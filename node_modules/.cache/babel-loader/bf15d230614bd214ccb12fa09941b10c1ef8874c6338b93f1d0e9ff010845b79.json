{"ast":null,"code":"var _jsxFileName = \"/Users/kartheekkodati/Desktop/frontend/src/pages/e-info/DSA.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DSA = () => {\n  _s();\n  const [activeSection, setActiveSection] = useState(null);\n  const dsaTopics = [{\n    id: 1,\n    title: \"Arrays\",\n    useCase: \"Storing product data, shopping cart items, order lists\",\n    example: \"Storing a list of items in a shopping cart where each item is represented as an object in an array.\",\n    syntax: `Product[] shoppingCart = new Product[10]; // Array to store 10 products\nshoppingCart[0] = new Product(\"Smartphone\", 499.99);\nshoppingCart[1] = new Product(\"Headphones\", 99.99);`\n  }, {\n    id: 2,\n    title: \"Linked Lists\",\n    useCase: \"Managing dynamic collections like user cart items, order history\",\n    example: \"Shopping Cart: When a user adds or removes items, a singly linked list can be used to store items dynamically.\",\n    syntax: `class Node {\n    Product data;\n    Node next;\n    Node(Product product) {\n        this.data = product;\n        this.next = null;\n    }\n}\n\nNode head = new Node(new Product(\"Smartphone\", 499.99));\nNode second = new Node(new Product(\"Headphones\", 99.99));\nhead.next = second;  // Linking nodes`\n  }, {\n    id: 3,\n    title: \"Stacks\",\n    useCase: \"Undo/redo actions, session management\",\n    example: \"Using a stack for session history to track user navigation.\",\n    syntax: `Stack<String> sessionHistory = new Stack<>();\nsessionHistory.push(\"Homepage\");\nsessionHistory.push(\"Product Page\");\nSystem.out.println(sessionHistory.peek()); // Top element: Product Page\nsessionHistory.pop(); // Remove Product Page`\n  }, {\n    id: 4,\n    title: \"Queues\",\n    useCase: \"Order processing, customer requests\",\n    example: \"Order Processing: Use a queue to process orders as they are placed (FIFO - First In First Out).\",\n    syntax: `Queue<Order> orderQueue = new LinkedList<>();\norderQueue.offer(new Order(\"Order1\"));\norderQueue.offer(new Order(\"Order2\"));\n\nOrder firstOrder = orderQueue.poll();  // Process first order`\n  }, {\n    id: 5,\n    title: \"Hash Maps\",\n    useCase: \"Managing product catalogs, user sessions\",\n    example: \"Product Catalog: Store product data where the product ID is the key and product details are the values.\",\n    syntax: `Map<Integer, Product> productCatalog = new HashMap<>();\nproductCatalog.put(1, new Product(\"Smartphone\", 499.99));\nProduct product = productCatalog.get(1);  // Retrieve product with ID 1`\n  }, {\n    id: 6,\n    title: \"Heaps (Priority Queue)\",\n    useCase: \"Ranking products, managing promotions by priority\",\n    example: \"Product Ranking: A max-heap can be used to rank products based on user ratings, price, or popularity.\",\n    syntax: `PriorityQueue<Product> productQueue = new PriorityQueue<>(\n    Comparator.comparingDouble(Product::getRating).reversed());\nproductQueue.offer(new Product(\"Smartphone\", 4.8));\nproductQueue.offer(new Product(\"Laptop\", 4.5));\n\nProduct topProduct = productQueue.poll();  // Product with highest rating`\n  }, {\n    id: 7,\n    title: \"Trees (Binary Search Tree)\",\n    useCase: \"Searching and sorting data like product categories or inventory\",\n    example: \"Product Categories: A BST can store product categories for efficient searching.\",\n    syntax: `class TreeNode {\n    String category;\n    TreeNode left, right;\n    TreeNode(String category) {\n        this.category = category;\n        left = right = null;\n    }\n}\n\nTreeNode root = new TreeNode(\"Electronics\");\nroot.left = new TreeNode(\"Mobile\");\nroot.right = new TreeNode(\"Laptop\");`\n  }, {\n    id: 8,\n    title: \"Tries\",\n    useCase: \"Autocomplete, keyword matching for product search\",\n    example: \"Product Search: A Trie can implement autocomplete search for products.\",\n    syntax: `class TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEndOfWord;\n}\n\nTrieNode root = new TrieNode();\nvoid insert(String word) {\n    TrieNode node = root;\n    for (char c : word.toCharArray()) {\n        node = node.children.computeIfAbsent(c, k -> new TrieNode());\n    }\n    node.isEndOfWord = true;\n}`\n  }, {\n    id: 9,\n    title: \"Graphs\",\n    useCase: \"Recommendation systems, user-product relationships\",\n    example: \"Recommendation System: Model relationships between users and products for recommendations.\",\n    syntax: `class Graph {\n    Map<String, List<String>> adjList = new HashMap<>();\n    void addEdge(String product, String recommendedProduct) {\n        adjList.computeIfAbsent(product, k -> new ArrayList<>())\n               .add(recommendedProduct);\n    }\n}\n\nGraph productGraph = new Graph();\nproductGraph.addEdge(\"Smartphone\", \"Headphones\");\nproductGraph.addEdge(\"Headphones\", \"Laptop\");`\n  }, {\n    id: 10,\n    title: \"Dynamic Programming\",\n    useCase: \"Optimization problems like maximizing profit or minimizing cost\",\n    example: \"Knapsack Problem: Calculate the best set of products to offer within a given budget.\",\n    syntax: `public int knapsack(int[] weights, int[] values, int capacity) {\n    int n = weights.length;\n    int[][] dp = new int[n + 1][capacity + 1];\n    \n    for (int i = 0; i <= n; i++) {\n        for (int w = 0; w <= capacity; w++) {\n            if (i == 0 || w == 0) {\n                dp[i][w] = 0;\n            } else if (weights[i - 1] <= w) {\n                dp[i][w] = Math.max(values[i - 1] + dp[i - 1][w - weights[i - 1]], \n                                   dp[i - 1][w]);\n            } else {\n                dp[i][w] = dp[i - 1][w];\n            }\n        }\n    }\n    return dp[n][capacity];\n}`\n  }, {\n    id: 11,\n    title: \"Divide and Conquer\",\n    useCase: \"Sorting and searching large datasets\",\n    example: \"Sorting Products: Use Quick Sort to sort large product catalogs by price, rating, or popularity.\",\n    syntax: `void quickSort(Product[] products, int low, int high) {\n    if (low < high) {\n        int pivot = partition(products, low, high);\n        quickSort(products, low, pivot - 1);\n        quickSort(products, pivot + 1, high);\n    }\n}\n\nint partition(Product[] products, int low, int high) {\n    Product pivot = products[high];\n    int i = (low - 1);\n    for (int j = low; j < high; j++) {\n        if (products[j].getPrice() < pivot.getPrice()) {\n            i++;\n            swap(products, i, j);\n        }\n    }\n    swap(products, i + 1, high);\n    return i + 1;\n}`\n  }, {\n    id: 12,\n    title: \"Sliding Window\",\n    useCase: \"Analyzing time-series data like sales trends\",\n    example: \"Sales Data Analysis: Calculate moving average of sales over a certain period.\",\n    syntax: `double[] sales = {100, 200, 300, 400, 500, 600, 700};\nint windowSize = 3;\nfor (int i = 0; i <= sales.length - windowSize; i++) {\n    double sum = 0;\n    for (int j = i; j < i + windowSize; j++) {\n        sum += sales[j];\n    }\n    System.out.println(\"Average sales from day \" + (i + 1) + \n                      \" to \" + (i + windowSize) + \": \" + (sum / windowSize));\n}`\n  }, {\n    id: 13,\n    title: \"Backtracking\",\n    useCase: \"Generating combinations of products for bundle offers\",\n    example: \"Shopping Cart Recommendations: Suggest combinations of additional items based on categories.\",\n    syntax: `void generateCombinations(Product[] products, int index, List<Product> currentCombo) {\n    if (index == products.length) {\n        System.out.println(currentCombo);\n        return;\n    }\n    \n    currentCombo.add(products[index]);\n    generateCombinations(products, index + 1, currentCombo);\n    \n    currentCombo.remove(currentCombo.size() - 1);\n    generateCombinations(products, index + 1, currentCombo);\n}`\n  }, {\n    id: 14,\n    title: \"Bit Manipulation\",\n    useCase: \"Efficiently handling flags, tracking user preferences\",\n    example: \"User Preferences: Store and check user preferences as binary flags to save memory space.\",\n    syntax: `int productAttributes = 0; // 0000 (None selected)\nproductAttributes |= (1 << 0); // Set attribute 0 (availability) -> 0001\nproductAttributes |= (1 << 2); // Set attribute 2 (color) -> 0101\nSystem.out.println((productAttributes & (1 << 2)) != 0); // Check if attribute 2 is set`\n  }];\n  const toggleSection = id => {\n    setActiveSection(activeSection === id ? null : id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center mb-4 text-primary\",\n          children: \"Data Structures and Algorithms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"lead text-center mb-5\",\n          children: \"Comprehensive guide to DSA concepts with e-commerce use cases and Java implementations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: dsaTopics.map(topic => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-lg-6 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card h-100 shadow-sm\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-header bg-light\",\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title mb-0 d-flex justify-content-between align-items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-primary\",\n                children: topic.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-sm btn-outline-info\",\n                onClick: () => toggleSection(topic.id),\n                title: \"Click for complexity analysis and tips\",\n                children: activeSection === topic.id ? 'Hide Details' : 'Show Details'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                className: \"text-success\",\n                children: \"Use Case:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"text-muted small mt-1\",\n                children: topic.useCase\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                className: \"text-info\",\n                children: \"Example:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small mt-1\",\n                children: topic.example\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                className: \"text-warning\",\n                children: \"Java Implementation:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                className: \"bg-light p-3 mt-2 rounded border\",\n                children: /*#__PURE__*/_jsxDEV(\"code\", {\n                  className: \"text-dark small\",\n                  children: topic.syntax\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), activeSection === topic.id && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 p-3 bg-info bg-opacity-10 rounded\",\n              children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n                className: \"text-info mb-2\",\n                children: \"\\uD83D\\uDCA1 Additional Details:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"small mb-0\",\n                children: [topic.id === 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(1) for access, O(n) for search\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Fixed-size collections, random access\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 2 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(1) for insertion/deletion at head, O(n) for search\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Dynamic size, frequent insertions/deletions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 291,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 3 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(1) for push/pop/peek operations\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: LIFO operations, undo functionality\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 4 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(1) for enqueue/dequeue operations\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 303,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: FIFO operations, task scheduling\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 5 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(1) average for get/put operations\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 310,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Key-value storage, fast lookups\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 312,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 6 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(log n) for insertion/deletion, O(1) for peek\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Priority-based processing, finding min/max\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 7 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(log n) for search/insert/delete (balanced)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 324,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 325,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Sorted data, range queries\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 8 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(m) for insert/search where m is word length\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(alphabet_size * N * M)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 332,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: String matching, autocomplete features\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 333,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 9 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(V + E) for traversal\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 338,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(V + E)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Relationships, networks, recommendations\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 10 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(n * capacity) for 0/1 knapsack\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n * capacity)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Optimization problems, resource allocation\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 347,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 11 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(n log n) average for quicksort\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(log n) for recursion stack\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 353,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Sorting large datasets efficiently\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 354,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 12 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(n) for single pass\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 359,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(1)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 360,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Subarray problems, moving averages\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 13 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(2^n) in worst case\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(n) for recursion depth\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Finding all solutions, constraint satisfaction\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 368,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true), topic.id === 14 && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Time Complexity: O(1) for bitwise operations\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Space Complexity: O(1)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 374,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: \"Best for: Flags, compact data representation\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 375,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this)\n      }, topic.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card bg-primary text-white\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: \"Quick Reference\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-text\",\n              children: \"Click the '+' button on any topic to view the complete Java implementation with syntax examples. All examples are tailored for e-commerce applications.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(DSA, \"XeBSVCva+NwZYfHCirzpMcn6b+Q=\");\n_c = DSA;\nexport default DSA;\nvar _c;\n$RefreshReg$(_c, \"DSA\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","DSA","_s","activeSection","setActiveSection","dsaTopics","id","title","useCase","example","syntax","toggleSection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","topic","onClick","_c","$RefreshReg$"],"sources":["/Users/kartheekkodati/Desktop/frontend/src/pages/e-info/DSA.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst DSA = () => {\n  const [activeSection, setActiveSection] = useState(null);\n\n  const dsaTopics = [\n    {\n      id: 1,\n      title: \"Arrays\",\n      useCase: \"Storing product data, shopping cart items, order lists\",\n      example: \"Storing a list of items in a shopping cart where each item is represented as an object in an array.\",\n      syntax: `Product[] shoppingCart = new Product[10]; // Array to store 10 products\nshoppingCart[0] = new Product(\"Smartphone\", 499.99);\nshoppingCart[1] = new Product(\"Headphones\", 99.99);`\n    },\n    {\n      id: 2,\n      title: \"Linked Lists\",\n      useCase: \"Managing dynamic collections like user cart items, order history\",\n      example: \"Shopping Cart: When a user adds or removes items, a singly linked list can be used to store items dynamically.\",\n      syntax: `class Node {\n    Product data;\n    Node next;\n    Node(Product product) {\n        this.data = product;\n        this.next = null;\n    }\n}\n\nNode head = new Node(new Product(\"Smartphone\", 499.99));\nNode second = new Node(new Product(\"Headphones\", 99.99));\nhead.next = second;  // Linking nodes`\n    },\n    {\n      id: 3,\n      title: \"Stacks\",\n      useCase: \"Undo/redo actions, session management\",\n      example: \"Using a stack for session history to track user navigation.\",\n      syntax: `Stack<String> sessionHistory = new Stack<>();\nsessionHistory.push(\"Homepage\");\nsessionHistory.push(\"Product Page\");\nSystem.out.println(sessionHistory.peek()); // Top element: Product Page\nsessionHistory.pop(); // Remove Product Page`\n    },\n    {\n      id: 4,\n      title: \"Queues\",\n      useCase: \"Order processing, customer requests\",\n      example: \"Order Processing: Use a queue to process orders as they are placed (FIFO - First In First Out).\",\n      syntax: `Queue<Order> orderQueue = new LinkedList<>();\norderQueue.offer(new Order(\"Order1\"));\norderQueue.offer(new Order(\"Order2\"));\n\nOrder firstOrder = orderQueue.poll();  // Process first order`\n    },\n    {\n      id: 5,\n      title: \"Hash Maps\",\n      useCase: \"Managing product catalogs, user sessions\",\n      example: \"Product Catalog: Store product data where the product ID is the key and product details are the values.\",\n      syntax: `Map<Integer, Product> productCatalog = new HashMap<>();\nproductCatalog.put(1, new Product(\"Smartphone\", 499.99));\nProduct product = productCatalog.get(1);  // Retrieve product with ID 1`\n    },\n    {\n      id: 6,\n      title: \"Heaps (Priority Queue)\",\n      useCase: \"Ranking products, managing promotions by priority\",\n      example: \"Product Ranking: A max-heap can be used to rank products based on user ratings, price, or popularity.\",\n      syntax: `PriorityQueue<Product> productQueue = new PriorityQueue<>(\n    Comparator.comparingDouble(Product::getRating).reversed());\nproductQueue.offer(new Product(\"Smartphone\", 4.8));\nproductQueue.offer(new Product(\"Laptop\", 4.5));\n\nProduct topProduct = productQueue.poll();  // Product with highest rating`\n    },\n    {\n      id: 7,\n      title: \"Trees (Binary Search Tree)\",\n      useCase: \"Searching and sorting data like product categories or inventory\",\n      example: \"Product Categories: A BST can store product categories for efficient searching.\",\n      syntax: `class TreeNode {\n    String category;\n    TreeNode left, right;\n    TreeNode(String category) {\n        this.category = category;\n        left = right = null;\n    }\n}\n\nTreeNode root = new TreeNode(\"Electronics\");\nroot.left = new TreeNode(\"Mobile\");\nroot.right = new TreeNode(\"Laptop\");`\n    },\n    {\n      id: 8,\n      title: \"Tries\",\n      useCase: \"Autocomplete, keyword matching for product search\",\n      example: \"Product Search: A Trie can implement autocomplete search for products.\",\n      syntax: `class TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    boolean isEndOfWord;\n}\n\nTrieNode root = new TrieNode();\nvoid insert(String word) {\n    TrieNode node = root;\n    for (char c : word.toCharArray()) {\n        node = node.children.computeIfAbsent(c, k -> new TrieNode());\n    }\n    node.isEndOfWord = true;\n}`\n    },\n    {\n      id: 9,\n      title: \"Graphs\",\n      useCase: \"Recommendation systems, user-product relationships\",\n      example: \"Recommendation System: Model relationships between users and products for recommendations.\",\n      syntax: `class Graph {\n    Map<String, List<String>> adjList = new HashMap<>();\n    void addEdge(String product, String recommendedProduct) {\n        adjList.computeIfAbsent(product, k -> new ArrayList<>())\n               .add(recommendedProduct);\n    }\n}\n\nGraph productGraph = new Graph();\nproductGraph.addEdge(\"Smartphone\", \"Headphones\");\nproductGraph.addEdge(\"Headphones\", \"Laptop\");`\n    },\n    {\n      id: 10,\n      title: \"Dynamic Programming\",\n      useCase: \"Optimization problems like maximizing profit or minimizing cost\",\n      example: \"Knapsack Problem: Calculate the best set of products to offer within a given budget.\",\n      syntax: `public int knapsack(int[] weights, int[] values, int capacity) {\n    int n = weights.length;\n    int[][] dp = new int[n + 1][capacity + 1];\n    \n    for (int i = 0; i <= n; i++) {\n        for (int w = 0; w <= capacity; w++) {\n            if (i == 0 || w == 0) {\n                dp[i][w] = 0;\n            } else if (weights[i - 1] <= w) {\n                dp[i][w] = Math.max(values[i - 1] + dp[i - 1][w - weights[i - 1]], \n                                   dp[i - 1][w]);\n            } else {\n                dp[i][w] = dp[i - 1][w];\n            }\n        }\n    }\n    return dp[n][capacity];\n}`\n    },\n    {\n      id: 11,\n      title: \"Divide and Conquer\",\n      useCase: \"Sorting and searching large datasets\",\n      example: \"Sorting Products: Use Quick Sort to sort large product catalogs by price, rating, or popularity.\",\n      syntax: `void quickSort(Product[] products, int low, int high) {\n    if (low < high) {\n        int pivot = partition(products, low, high);\n        quickSort(products, low, pivot - 1);\n        quickSort(products, pivot + 1, high);\n    }\n}\n\nint partition(Product[] products, int low, int high) {\n    Product pivot = products[high];\n    int i = (low - 1);\n    for (int j = low; j < high; j++) {\n        if (products[j].getPrice() < pivot.getPrice()) {\n            i++;\n            swap(products, i, j);\n        }\n    }\n    swap(products, i + 1, high);\n    return i + 1;\n}`\n    },\n    {\n      id: 12,\n      title: \"Sliding Window\",\n      useCase: \"Analyzing time-series data like sales trends\",\n      example: \"Sales Data Analysis: Calculate moving average of sales over a certain period.\",\n      syntax: `double[] sales = {100, 200, 300, 400, 500, 600, 700};\nint windowSize = 3;\nfor (int i = 0; i <= sales.length - windowSize; i++) {\n    double sum = 0;\n    for (int j = i; j < i + windowSize; j++) {\n        sum += sales[j];\n    }\n    System.out.println(\"Average sales from day \" + (i + 1) + \n                      \" to \" + (i + windowSize) + \": \" + (sum / windowSize));\n}`\n    },\n    {\n      id: 13,\n      title: \"Backtracking\",\n      useCase: \"Generating combinations of products for bundle offers\",\n      example: \"Shopping Cart Recommendations: Suggest combinations of additional items based on categories.\",\n      syntax: `void generateCombinations(Product[] products, int index, List<Product> currentCombo) {\n    if (index == products.length) {\n        System.out.println(currentCombo);\n        return;\n    }\n    \n    currentCombo.add(products[index]);\n    generateCombinations(products, index + 1, currentCombo);\n    \n    currentCombo.remove(currentCombo.size() - 1);\n    generateCombinations(products, index + 1, currentCombo);\n}`\n    },\n    {\n      id: 14,\n      title: \"Bit Manipulation\",\n      useCase: \"Efficiently handling flags, tracking user preferences\",\n      example: \"User Preferences: Store and check user preferences as binary flags to save memory space.\",\n      syntax: `int productAttributes = 0; // 0000 (None selected)\nproductAttributes |= (1 << 0); // Set attribute 0 (availability) -> 0001\nproductAttributes |= (1 << 2); // Set attribute 2 (color) -> 0101\nSystem.out.println((productAttributes & (1 << 2)) != 0); // Check if attribute 2 is set`\n    }\n  ];\n\n  const toggleSection = (id) => {\n    setActiveSection(activeSection === id ? null : id);\n  };\n\n  return (\n    <div className=\"container mt-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <h2 className=\"text-center mb-4 text-primary\">Data Structures and Algorithms</h2>\n          <p className=\"lead text-center mb-5\">\n            Comprehensive guide to DSA concepts with e-commerce use cases and Java implementations\n          </p>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        {dsaTopics.map((topic) => (\n          <div key={topic.id} className=\"col-12 col-lg-6 mb-4\">\n            <div className=\"card h-100 shadow-sm\">\n              <div className=\"card-header bg-light\">\n                <h5 className=\"card-title mb-0 d-flex justify-content-between align-items-center\">\n                  <span className=\"text-primary\">{topic.title}</span>\n                  <button\n                    className=\"btn btn-sm btn-outline-info\"\n                    onClick={() => toggleSection(topic.id)}\n                    title=\"Click for complexity analysis and tips\"\n                  >\n                    {activeSection === topic.id ? 'Hide Details' : 'Show Details'}\n                  </button>\n                </h5>\n              </div>\n              <div className=\"card-body\">\n                <div className=\"mb-3\">\n                  <strong className=\"text-success\">Use Case:</strong>\n                  <p className=\"text-muted small mt-1\">{topic.useCase}</p>\n                </div>\n                \n                <div className=\"mb-3\">\n                  <strong className=\"text-info\">Example:</strong>\n                  <p className=\"small mt-1\">{topic.example}</p>\n                </div>\n\n                <div className=\"mb-3\">\n                  <strong className=\"text-warning\">Java Implementation:</strong>\n                  <pre className=\"bg-light p-3 mt-2 rounded border\">\n                    <code className=\"text-dark small\">{topic.syntax}</code>\n                  </pre>\n                </div>\n\n                {activeSection === topic.id && (\n                  <div className=\"mt-3 p-3 bg-info bg-opacity-10 rounded\">\n                    <h6 className=\"text-info mb-2\">💡 Additional Details:</h6>\n                    <ul className=\"small mb-0\">\n                      {topic.id === 1 && (\n                        <>\n                          <li>Time Complexity: O(1) for access, O(n) for search</li>\n                          <li>Space Complexity: O(n)</li>\n                          <li>Best for: Fixed-size collections, random access</li>\n                        </>\n                      )}\n                      {topic.id === 2 && (\n                        <>\n                          <li>Time Complexity: O(1) for insertion/deletion at head, O(n) for search</li>\n                          <li>Space Complexity: O(n)</li>\n                          <li>Best for: Dynamic size, frequent insertions/deletions</li>\n                        </>\n                      )}\n                      {topic.id === 3 && (\n                        <>\n                          <li>Time Complexity: O(1) for push/pop/peek operations</li>\n                          <li>Space Complexity: O(n)</li>\n                          <li>Best for: LIFO operations, undo functionality</li>\n                        </>\n                      )}\n                      {topic.id === 4 && (\n                        <>\n                          <li>Time Complexity: O(1) for enqueue/dequeue operations</li>\n                          <li>Space Complexity: O(n)</li>\n                          <li>Best for: FIFO operations, task scheduling</li>\n                        </>\n                      )}\n                      {topic.id === 5 && (\n                        <>\n                          <li>Time Complexity: O(1) average for get/put operations</li>\n                          <li>Space Complexity: O(n)</li>\n                          <li>Best for: Key-value storage, fast lookups</li>\n                        </>\n                      )}\n                      {topic.id === 6 && (\n                        <>\n                          <li>Time Complexity: O(log n) for insertion/deletion, O(1) for peek</li>\n                          <li>Space Complexity: O(n)</li>\n                          <li>Best for: Priority-based processing, finding min/max</li>\n                        </>\n                      )}\n                      {topic.id === 7 && (\n                        <>\n                          <li>Time Complexity: O(log n) for search/insert/delete (balanced)</li>\n                          <li>Space Complexity: O(n)</li>\n                          <li>Best for: Sorted data, range queries</li>\n                        </>\n                      )}\n                      {topic.id === 8 && (\n                        <>\n                          <li>Time Complexity: O(m) for insert/search where m is word length</li>\n                          <li>Space Complexity: O(alphabet_size * N * M)</li>\n                          <li>Best for: String matching, autocomplete features</li>\n                        </>\n                      )}\n                      {topic.id === 9 && (\n                        <>\n                          <li>Time Complexity: O(V + E) for traversal</li>\n                          <li>Space Complexity: O(V + E)</li>\n                          <li>Best for: Relationships, networks, recommendations</li>\n                        </>\n                      )}\n                      {topic.id === 10 && (\n                        <>\n                          <li>Time Complexity: O(n * capacity) for 0/1 knapsack</li>\n                          <li>Space Complexity: O(n * capacity)</li>\n                          <li>Best for: Optimization problems, resource allocation</li>\n                        </>\n                      )}\n                      {topic.id === 11 && (\n                        <>\n                          <li>Time Complexity: O(n log n) average for quicksort</li>\n                          <li>Space Complexity: O(log n) for recursion stack</li>\n                          <li>Best for: Sorting large datasets efficiently</li>\n                        </>\n                      )}\n                      {topic.id === 12 && (\n                        <>\n                          <li>Time Complexity: O(n) for single pass</li>\n                          <li>Space Complexity: O(1)</li>\n                          <li>Best for: Subarray problems, moving averages</li>\n                        </>\n                      )}\n                      {topic.id === 13 && (\n                        <>\n                          <li>Time Complexity: O(2^n) in worst case</li>\n                          <li>Space Complexity: O(n) for recursion depth</li>\n                          <li>Best for: Finding all solutions, constraint satisfaction</li>\n                        </>\n                      )}\n                      {topic.id === 14 && (\n                        <>\n                          <li>Time Complexity: O(1) for bitwise operations</li>\n                          <li>Space Complexity: O(1)</li>\n                          <li>Best for: Flags, compact data representation</li>\n                        </>\n                      )}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"row mt-5\">\n        <div className=\"col-12\">\n          <div className=\"card bg-primary text-white\">\n            <div className=\"card-body text-center\">\n              <h5 className=\"card-title\">Quick Reference</h5>\n              <p className=\"card-text\">\n                Click the '+' button on any topic to view the complete Java implementation with syntax examples.\n                All examples are tailored for e-commerce applications.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DSA;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMS,SAAS,GAAG,CAChB;IACEC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,QAAQ;IACfC,OAAO,EAAE,wDAAwD;IACjEC,OAAO,EAAE,qGAAqG;IAC9GC,MAAM,EAAE;AACd;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,cAAc;IACrBC,OAAO,EAAE,kEAAkE;IAC3EC,OAAO,EAAE,gHAAgH;IACzHC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,QAAQ;IACfC,OAAO,EAAE,uCAAuC;IAChDC,OAAO,EAAE,6DAA6D;IACtEC,MAAM,EAAE;AACd;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,QAAQ;IACfC,OAAO,EAAE,qCAAqC;IAC9CC,OAAO,EAAE,iGAAiG;IAC1GC,MAAM,EAAE;AACd;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,WAAW;IAClBC,OAAO,EAAE,0CAA0C;IACnDC,OAAO,EAAE,yGAAyG;IAClHC,MAAM,EAAE;AACd;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,wBAAwB;IAC/BC,OAAO,EAAE,mDAAmD;IAC5DC,OAAO,EAAE,uGAAuG;IAChHC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,4BAA4B;IACnCC,OAAO,EAAE,iEAAiE;IAC1EC,OAAO,EAAE,iFAAiF;IAC1FC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,OAAO;IACdC,OAAO,EAAE,mDAAmD;IAC5DC,OAAO,EAAE,wEAAwE;IACjFC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,QAAQ;IACfC,OAAO,EAAE,oDAAoD;IAC7DC,OAAO,EAAE,4FAA4F;IACrGC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,EAAE;IACNC,KAAK,EAAE,qBAAqB;IAC5BC,OAAO,EAAE,iEAAiE;IAC1EC,OAAO,EAAE,sFAAsF;IAC/FC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,EAAE;IACNC,KAAK,EAAE,oBAAoB;IAC3BC,OAAO,EAAE,sCAAsC;IAC/CC,OAAO,EAAE,kGAAkG;IAC3GC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,EAAE;IACNC,KAAK,EAAE,gBAAgB;IACvBC,OAAO,EAAE,8CAA8C;IACvDC,OAAO,EAAE,+EAA+E;IACxFC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEJ,EAAE,EAAE,EAAE;IACNC,KAAK,EAAE,cAAc;IACrBC,OAAO,EAAE,uDAAuD;IAChEC,OAAO,EAAE,8FAA8F;IACvGC,MAAM,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}