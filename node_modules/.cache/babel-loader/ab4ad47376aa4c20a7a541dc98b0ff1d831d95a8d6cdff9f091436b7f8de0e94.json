{"ast":null,"code":"// Spring Boot Interactive Guide - JavaScript Implementation\n\nclass SpringBootGuide {\n  constructor() {\n    this.springBootData = {\n      overview: {\n        title: \"Spring Boot Overview\",\n        description: \"Spring Boot simplifies application development by providing pre-configured templates and default settings that eliminate the need for complex XML configurations.\",\n        features: [\"Auto-configuration\", \"Embedded servers\", \"Production-ready features\", \"Microservices support\"]\n      },\n      annotations: {\n        \"@SpringBootApplication\": {\n          description: \"Makes it easy to launch a Spring application with minimal setup\",\n          example: `@SpringBootApplication\npublic class MyApplication {\n  public static void main(String[] args) {\n      SpringApplication.run(MyApplication.class, args);\n  }\n}`\n        },\n        \"@Component\": {\n          description: \"Marks a class as a Spring component for dependency injection\",\n          example: `@Component\npublic class UserService {\n  // Service implementation\n}`\n        },\n        \"@Service\": {\n          description: \"Specialized @Component for service layer classes\",\n          example: `@Service\npublic class BusinessService {\n  // Business logic here\n}`\n        },\n        \"@Repository\": {\n          description: \"Specialized @Component for data access layer\",\n          example: `@Repository\npublic class UserRepository {\n  // Data access logic\n}`\n        },\n        \"@Controller\": {\n          description: \"Marks a class as a Spring MVC controller\",\n          example: `@Controller\npublic class HomeController {\n  @GetMapping(\"/\")\n  public String home() {\n      return \"index\";\n  }\n}`\n        },\n        \"@Bean\": {\n          description: \"Explicitly defines a bean in configuration classes\",\n          example: `@Configuration\npublic class AppConfig {\n  @Bean\n  public DataSource dataSource() {\n      return new HikariDataSource();\n  }\n}`\n        }\n      },\n      starters: [{\n        name: \"spring-boot-starter-web\",\n        purpose: \"Web services and REST APIs\",\n        includes: [\"Spring MVC\", \"Tomcat\", \"Jackson\"]\n      }, {\n        name: \"spring-boot-starter-data-jpa\",\n        purpose: \"JPA data access\",\n        includes: [\"Hibernate\", \"Spring Data JPA\", \"Transaction API\"]\n      }, {\n        name: \"spring-boot-starter-security\",\n        purpose: \"Security features\",\n        includes: [\"Spring Security\", \"Authentication\", \"Authorization\"]\n      }, {\n        name: \"spring-boot-starter-actuator\",\n        purpose: \"Production monitoring\",\n        includes: [\"Health checks\", \"Metrics\", \"Info endpoints\"]\n      }],\n      embeddedServers: [\"Tomcat\", \"Jetty\", \"Undertow\"],\n      actuatorFeatures: [\"Health checks\", \"Metrics collection\", \"Application information\", \"Environment variables\", \"Logging configuration\", \"Prometheus integration\", \"Grafana compatibility\"]\n    };\n    this.init();\n  }\n  init() {\n    this.createUI();\n    this.setupEventListeners();\n    this.showSection('overview');\n  }\n  createUI() {\n    // Create main container\n    const container = document.createElement('div');\n    container.className = 'spring-boot-guide';\n    container.innerHTML = this.getHTML();\n\n    // Add CSS\n    const style = document.createElement('style');\n    style.textContent = this.getCSS();\n    document.head.appendChild(style);\n\n    // Add to body\n    document.body.appendChild(container);\n  }\n  getHTML() {\n    return `\n          <div class=\"header\">\n              <h1>üçÉ Spring Boot Interactive Guide</h1>\n              <p>Explore Spring Boot features with interactive examples</p>\n          </div>\n          \n          <nav class=\"navigation\">\n              <button class=\"nav-btn active\" data-section=\"overview\">Overview</button>\n              <button class=\"nav-btn\" data-section=\"annotations\">Annotations</button>\n              <button class=\"nav-btn\" data-section=\"starters\">Starters</button>\n              <button class=\"nav-btn\" data-section=\"beans\">Beans & IoC</button>\n              <button class=\"nav-btn\" data-section=\"actuator\">Actuator</button>\n              <button class=\"nav-btn\" data-section=\"demo\">Live Demo</button>\n          </nav>\n          \n          <main class=\"content\">\n              <section id=\"overview\" class=\"section active\">\n                  <h2>Spring Boot Overview</h2>\n                  <div class=\"feature-grid\">\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('autoconfig')\">\n                          <h3>üîß Auto Configuration</h3>\n                          <p>Automatically configures your application based on dependencies</p>\n                      </div>\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('embedded')\">\n                          <h3>üöÄ Embedded Servers</h3>\n                          <p>Built-in Tomcat, Jetty, or Undertow servers</p>\n                      </div>\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('microservices')\">\n                          <h3>üîó Microservices</h3>\n                          <p>Lightweight components for distributed systems</p>\n                      </div>\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('production')\">\n                          <h3>üìä Production Ready</h3>\n                          <p>Built-in monitoring and health checks</p>\n                      </div>\n                  </div>\n                  <div id=\"feature-details\" class=\"details-panel\"></div>\n              </section>\n              \n              <section id=\"annotations\" class=\"section\">\n                  <h2>Spring Boot Annotations</h2>\n                  <div class=\"annotations-list\">\n                      ${this.generateAnnotationsList()}\n                  </div>\n              </section>\n              \n              <section id=\"starters\" class=\"section\">\n                  <h2>Spring Boot Starters</h2>\n                  <div class=\"starters-grid\">\n                      ${this.generateStartersList()}\n                  </div>\n              </section>\n              \n              <section id=\"beans\" class=\"section\">\n                  <h2>Spring Beans & IoC Container</h2>\n                  <div class=\"beans-explanation\">\n                      <div class=\"concept-card\">\n                          <h3>What are Spring Beans?</h3>\n                          <p>Beans are objects managed by the Spring IoC (Inversion of Control) container. They are created, managed, and destroyed by the container according to the defined lifecycle.</p>\n                      </div>\n                      <div class=\"concept-card\">\n                          <h3>Bean Lifecycle</h3>\n                          <div class=\"lifecycle-steps\">\n                              <span class=\"step\">Instantiation</span> ‚Üí \n                              <span class=\"step\">Dependency Injection</span> ‚Üí \n                              <span class=\"step\">Initialization</span> ‚Üí \n                              <span class=\"step\">Usage</span> ‚Üí \n                              <span class=\"step\">Destruction</span>\n                          </div>\n                      </div>\n                      <button class=\"demo-btn\" onclick=\"springGuide.simulateBeanLifecycle()\">\n                          Simulate Bean Lifecycle\n                      </button>\n                      <div id=\"lifecycle-demo\" class=\"lifecycle-visualization\"></div>\n                  </div>\n              </section>\n              \n              <section id=\"actuator\" class=\"section\">\n                  <h2>Spring Boot Actuator</h2>\n                  <div class=\"actuator-features\">\n                      ${this.generateActuatorFeatures()}\n                  </div>\n                  <div class=\"monitoring-demo\">\n                      <h3>Monitoring Dashboard Simulation</h3>\n                      <div class=\"metrics-panel\">\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">Health Status</span>\n                              <span class=\"metric-value\" id=\"health-status\">UP</span>\n                          </div>\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">Memory Usage</span>\n                              <span class=\"metric-value\" id=\"memory-usage\">0%</span>\n                          </div>\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">CPU Usage</span>\n                              <span class=\"metric-value\" id=\"cpu-usage\">0%</span>\n                          </div>\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">Active Threads</span>\n                              <span class=\"metric-value\" id=\"thread-count\">0</span>\n                          </div>\n                      </div>\n                      <button class=\"demo-btn\" onclick=\"springGuide.startMetricsSimulation()\">\n                          Start Monitoring\n                      </button>\n                  </div>\n              </section>\n              \n              <section id=\"demo\" class=\"section\">\n                  <h2>Interactive Spring Boot Demo</h2>\n                  <div class=\"demo-container\">\n                      <div class=\"code-editor\">\n                          <h3>Spring Boot Application</h3>\n                          <textarea id=\"code-input\" placeholder=\"Write your Spring Boot code here...\">\n@SpringBootApplication\npublic class DemoApplication {\n  public static void main(String[] args) {\n      SpringApplication.run(DemoApplication.class, args);\n  }\n}\n\n@RestController\nclass HelloController {\n  @GetMapping(\"/hello\")\n  public String hello() {\n      return \"Hello Spring Boot!\";\n  }\n}</textarea>\n                      </div>\n                      <div class=\"demo-output\">\n                          <h3>Application Output</h3>\n                          <div id=\"demo-result\" class=\"output-panel\">\n                              Click \"Run Application\" to see the output\n                          </div>\n                          <button class=\"demo-btn\" onclick=\"springGuide.runSpringBootDemo()\">\n                              Run Application\n                          </button>\n                      </div>\n                  </div>\n              </section>\n          </main>\n      `;\n  }\n  getCSS() {\n    return `\n          .spring-boot-guide {\n              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              max-width: 1200px;\n              margin: 0 auto;\n              padding: 20px;\n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              min-height: 100vh;\n              color: #333;\n          }\n          \n          .header {\n              text-align: center;\n              color: white;\n              margin-bottom: 30px;\n              animation: fadeInDown 1s ease-out;\n          }\n          \n          .header h1 {\n              font-size: 2.5rem;\n              margin-bottom: 10px;\n              text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n          }\n          \n          .navigation {\n              display: flex;\n              justify-content: center;\n              flex-wrap: wrap;\n              gap: 10px;\n              margin-bottom: 30px;\n          }\n          \n          .nav-btn {\n              background: rgba(255, 255, 255, 0.1);\n              border: 2px solid rgba(255, 255, 255, 0.3);\n              color: white;\n              padding: 12px 20px;\n              border-radius: 25px;\n              cursor: pointer;\n              transition: all 0.3s ease;\n              backdrop-filter: blur(10px);\n          }\n          \n          .nav-btn:hover, .nav-btn.active {\n              background: rgba(255, 255, 255, 0.9);\n              color: #667eea;\n              transform: translateY(-2px);\n          }\n          \n          .section {\n              background: rgba(255, 255, 255, 0.95);\n              border-radius: 15px;\n              padding: 30px;\n              box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n              display: none;\n              animation: fadeInUp 0.5s ease-out;\n          }\n          \n          .section.active {\n              display: block;\n          }\n          \n          .section h2 {\n              color: #667eea;\n              margin-bottom: 20px;\n              font-size: 2rem;\n          }\n          \n          .feature-grid {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n              gap: 20px;\n              margin-bottom: 20px;\n          }\n          \n          .feature-card {\n              background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n              color: white;\n              padding: 20px;\n              border-radius: 10px;\n              cursor: pointer;\n              transition: all 0.3s ease;\n              text-align: center;\n          }\n          \n          .feature-card:hover {\n              transform: translateY(-5px);\n              box-shadow: 0 15px 30px rgba(0,0,0,0.2);\n          }\n          \n          .details-panel {\n              background: #f8f9fa;\n              padding: 20px;\n              border-radius: 10px;\n              margin-top: 20px;\n              display: none;\n          }\n          \n          .annotation-item {\n              background: #fff;\n              border: 1px solid #e9ecef;\n              border-radius: 8px;\n              padding: 20px;\n              margin-bottom: 15px;\n              transition: all 0.3s ease;\n          }\n          \n          .annotation-item:hover {\n              box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n              transform: translateX(5px);\n          }\n          \n          .annotation-name {\n              color: #667eea;\n              font-weight: bold;\n              font-size: 1.2rem;\n              margin-bottom: 10px;\n          }\n          \n          .code-example {\n              background: #2d3748;\n              color: #e2e8f0;\n              padding: 15px;\n              border-radius: 5px;\n              font-family: 'Monaco', monospace;\n              margin-top: 10px;\n              overflow-x: auto;\n          }\n          \n          .starters-grid {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n              gap: 20px;\n          }\n          \n          .starter-card {\n              background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n              color: white;\n              padding: 20px;\n              border-radius: 10px;\n              transition: all 0.3s ease;\n          }\n          \n          .starter-card:hover {\n              transform: scale(1.05);\n          }\n          \n          .concept-card {\n              background: #fff;\n              border-left: 4px solid #667eea;\n              padding: 20px;\n              margin-bottom: 20px;\n              border-radius: 0 8px 8px 0;\n          }\n          \n          .lifecycle-steps {\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n              margin: 20px 0;\n              flex-wrap: wrap;\n          }\n          \n          .step {\n              background: #667eea;\n              color: white;\n              padding: 8px 15px;\n              border-radius: 20px;\n              font-size: 0.9rem;\n              margin: 5px;\n          }\n          \n          .metrics-panel {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n              gap: 15px;\n              margin: 20px 0;\n          }\n          \n          .metric {\n              background: #fff;\n              padding: 15px;\n              border-radius: 8px;\n              border-left: 4px solid #28a745;\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n          }\n          \n          .metric-value {\n              font-weight: bold;\n              color: #28a745;\n          }\n          \n          .demo-btn {\n              background: #667eea;\n              color: white;\n              border: none;\n              padding: 12px 24px;\n              border-radius: 25px;\n              cursor: pointer;\n              transition: all 0.3s ease;\n              font-size: 1rem;\n              margin: 10px 5px;\n          }\n          \n          .demo-btn:hover {\n              background: #5a67d8;\n              transform: translateY(-2px);\n          }\n          \n          .demo-container {\n              display: grid;\n              grid-template-columns: 1fr 1fr;\n              gap: 20px;\n          }\n          \n          .code-editor textarea {\n              width: 100%;\n              height: 300px;\n              padding: 15px;\n              border: 1px solid #ddd;\n              border-radius: 8px;\n              font-family: 'Monaco', monospace;\n              font-size: 14px;\n              resize: vertical;\n          }\n          \n          .output-panel {\n              background: #2d3748;\n              color: #e2e8f0;\n              padding: 20px;\n              border-radius: 8px;\n              height: 200px;\n              overflow-y: auto;\n              font-family: 'Monaco', monospace;\n          }\n          \n          .lifecycle-visualization {\n              background: #f8f9fa;\n              padding: 20px;\n              border-radius: 8px;\n              margin-top: 15px;\n              min-height: 100px;\n          }\n          \n          @keyframes fadeInDown {\n              from { opacity: 0; transform: translateY(-30px); }\n              to { opacity: 1; transform: translateY(0); }\n          }\n          \n          @keyframes fadeInUp {\n              from { opacity: 0; transform: translateY(30px); }\n              to { opacity: 1; transform: translateY(0); }\n          }\n          \n          @media (max-width: 768px) {\n              .demo-container {\n                  grid-template-columns: 1fr;\n              }\n              \n              .lifecycle-steps {\n                  flex-direction: column;\n                  align-items: flex-start;\n              }\n              \n              .feature-grid {\n                  grid-template-columns: 1fr;\n              }\n          }\n      `;\n  }\n  generateAnnotationsList() {\n    return Object.entries(this.springBootData.annotations).map(([name, info]) => `\n              <div class=\"annotation-item\">\n                  <div class=\"annotation-name\">${name}</div>\n                  <p>${info.description}</p>\n                  <div class=\"code-example\">${info.example}</div>\n              </div>\n          `).join('');\n  }\n  generateStartersList() {\n    return this.springBootData.starters.map(starter => `\n              <div class=\"starter-card\">\n                  <h3>${starter.name}</h3>\n                  <p><strong>Purpose:</strong> ${starter.purpose}</p>\n                  <p><strong>Includes:</strong> ${starter.includes.join(', ')}</p>\n              </div>\n          `).join('');\n  }\n  generateActuatorFeatures() {\n    return this.springBootData.actuatorFeatures.map(feature => `\n              <div class=\"concept-card\">\n                  <h4>üìä ${feature}</h4>\n                  <p>Essential for monitoring and maintaining applications in production environments.</p>\n              </div>\n          `).join('');\n  }\n  setupEventListeners() {\n    // Navigation\n    document.querySelectorAll('.nav-btn').forEach(btn => {\n      btn.addEventListener('click', e => {\n        const section = e.target.dataset.section;\n        this.showSection(section);\n      });\n    });\n  }\n  showSection(sectionName) {\n    // Hide all sections\n    document.querySelectorAll('.section').forEach(section => {\n      section.classList.remove('active');\n    });\n\n    // Show selected section\n    document.getElementById(sectionName).classList.add('active');\n\n    // Update navigation\n    document.querySelectorAll('.nav-btn').forEach(btn => {\n      btn.classList.remove('active');\n    });\n    document.querySelector(`[data-section=\"${sectionName}\"]`).classList.add('active');\n  }\n  showFeatureDetails(feature) {\n    const detailsPanel = document.getElementById('feature-details');\n    const details = {\n      autoconfig: {\n        title: \"Auto Configuration\",\n        content: \"Spring Boot automatically configures your application based on the dependencies you have added. For example, if H2 database is on your classpath, Spring Boot will automatically configure an in-memory database.\"\n      },\n      embedded: {\n        title: \"Embedded Servers\",\n        content: \"You can package your Spring Boot application into a self-contained executable JAR or WAR file. Supports Tomcat, Jetty, and Undertow servers out of the box.\"\n      },\n      microservices: {\n        title: \"Microservices Support\",\n        content: \"Spring Boot simplifies microservices development with lightweight components, service discovery, configuration management, and circuit breakers.\"\n      },\n      production: {\n        title: \"Production Ready Features\",\n        content: \"Built-in health checks, metrics collection, application info, and monitoring endpoints. Integrates seamlessly with Prometheus and Grafana.\"\n      }\n    };\n    const detail = details[feature];\n    if (detail) {\n      detailsPanel.innerHTML = `\n              <h3>${detail.title}</h3>\n              <p>${detail.content}</p>\n          `;\n      detailsPanel.style.display = 'block';\n    }\n  }\n  simulateBeanLifecycle() {\n    const visualization = document.getElementById('lifecycle-demo');\n    const steps = [\"üèóÔ∏è Bean instantiation started...\", \"üíâ Injecting dependencies...\", \"‚ö° Initializing bean...\", \"‚úÖ Bean ready for use!\", \"üîÑ Bean in active state...\", \"üóëÔ∏è Bean destroyed on context shutdown\"];\n    visualization.innerHTML = '';\n    let stepIndex = 0;\n    const interval = setInterval(() => {\n      if (stepIndex < steps.length) {\n        const stepDiv = document.createElement('div');\n        stepDiv.textContent = steps[stepIndex];\n        stepDiv.style.cssText = 'padding: 5px 0; opacity: 0; transition: opacity 0.5s;';\n        visualization.appendChild(stepDiv);\n        setTimeout(() => {\n          stepDiv.style.opacity = '1';\n        }, 100);\n        stepIndex++;\n      } else {\n        clearInterval(interval);\n      }\n    }, 1000);\n  }\n  startMetricsSimulation() {\n    const updateMetric = (id, getValue) => {\n      setInterval(() => {\n        document.getElementById(id).textContent = getValue();\n      }, 2000);\n    };\n    updateMetric('memory-usage', () => Math.floor(Math.random() * 30 + 20) + '%');\n    updateMetric('cpu-usage', () => Math.floor(Math.random() * 50 + 10) + '%');\n    updateMetric('thread-count', () => Math.floor(Math.random() * 50 + 10));\n\n    // Simulate occasional health status changes\n    setInterval(() => {\n      const status = Math.random() > 0.9 ? 'DOWN' : 'UP';\n      const element = document.getElementById('health-status');\n      element.textContent = status;\n      element.style.color = status === 'UP' ? '#28a745' : '#dc3545';\n    }, 5000);\n  }\n  runSpringBootDemo() {\n    const code = document.getElementById('code-input').value;\n    const output = document.getElementById('demo-result');\n\n    // Simulate Spring Boot startup\n    const startupMessages = [\"üöÄ Starting Spring Boot Application...\", \"üì¶ Scanning for components...\", \"üîß Auto-configuring beans...\", \"üåê Starting embedded Tomcat server...\", \"‚úÖ Application started successfully!\", \"\", \"üì° Available endpoints:\", \"  GET /hello - Returns greeting message\", \"  GET /actuator/health - Health check\", \"  GET /actuator/metrics - Application metrics\", \"\", \"üí° Your application is running on http://localhost:8080\"];\n    output.innerHTML = '';\n    let messageIndex = 0;\n    const interval = setInterval(() => {\n      if (messageIndex < startupMessages.length) {\n        const message = startupMessages[messageIndex];\n        const messageDiv = document.createElement('div');\n        messageDiv.textContent = message;\n        messageDiv.style.marginBottom = '5px';\n        output.appendChild(messageDiv);\n        messageIndex++;\n        output.scrollTop = output.scrollHeight;\n      } else {\n        clearInterval(interval);\n      }\n    }, 500);\n  }\n}\n\n// Initialize the Spring Boot Guide when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.springGuide = new SpringBootGuide();\n});\n\n// Export for use in other contexts\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = SpringBootGuide;\n}","map":{"version":3,"names":["SpringBootGuide","constructor","springBootData","overview","title","description","features","annotations","example","starters","name","purpose","includes","embeddedServers","actuatorFeatures","init","createUI","setupEventListeners","showSection","container","document","createElement","className","innerHTML","getHTML","style","textContent","getCSS","head","appendChild","body","generateAnnotationsList","generateStartersList","generateActuatorFeatures","Object","entries","map","info","join","starter","feature","querySelectorAll","forEach","btn","addEventListener","e","section","target","dataset","sectionName","classList","remove","getElementById","add","querySelector","showFeatureDetails","detailsPanel","details","autoconfig","content","embedded","microservices","production","detail","display","simulateBeanLifecycle","visualization","steps","stepIndex","interval","setInterval","length","stepDiv","cssText","setTimeout","opacity","clearInterval","startMetricsSimulation","updateMetric","id","getValue","Math","floor","random","status","element","color","runSpringBootDemo","code","value","output","startupMessages","messageIndex","message","messageDiv","marginBottom","scrollTop","scrollHeight","window","springGuide","module","exports"],"sources":["/Users/kartheekkodati/Desktop/frontend/src/pages/e-info/s.js"],"sourcesContent":["// Spring Boot Interactive Guide - JavaScript Implementation\n\nclass SpringBootGuide {\n  constructor() {\n      this.springBootData = {\n          overview: {\n              title: \"Spring Boot Overview\",\n              description: \"Spring Boot simplifies application development by providing pre-configured templates and default settings that eliminate the need for complex XML configurations.\",\n              features: [\n                  \"Auto-configuration\",\n                  \"Embedded servers\",\n                  \"Production-ready features\",\n                  \"Microservices support\"\n              ]\n          },\n          annotations: {\n              \"@SpringBootApplication\": {\n                  description: \"Makes it easy to launch a Spring application with minimal setup\",\n                  example: `@SpringBootApplication\npublic class MyApplication {\n  public static void main(String[] args) {\n      SpringApplication.run(MyApplication.class, args);\n  }\n}`\n              },\n              \"@Component\": {\n                  description: \"Marks a class as a Spring component for dependency injection\",\n                  example: `@Component\npublic class UserService {\n  // Service implementation\n}`\n              },\n              \"@Service\": {\n                  description: \"Specialized @Component for service layer classes\",\n                  example: `@Service\npublic class BusinessService {\n  // Business logic here\n}`\n              },\n              \"@Repository\": {\n                  description: \"Specialized @Component for data access layer\",\n                  example: `@Repository\npublic class UserRepository {\n  // Data access logic\n}`\n              },\n              \"@Controller\": {\n                  description: \"Marks a class as a Spring MVC controller\",\n                  example: `@Controller\npublic class HomeController {\n  @GetMapping(\"/\")\n  public String home() {\n      return \"index\";\n  }\n}`\n              },\n              \"@Bean\": {\n                  description: \"Explicitly defines a bean in configuration classes\",\n                  example: `@Configuration\npublic class AppConfig {\n  @Bean\n  public DataSource dataSource() {\n      return new HikariDataSource();\n  }\n}`\n              }\n          },\n          starters: [\n              {\n                  name: \"spring-boot-starter-web\",\n                  purpose: \"Web services and REST APIs\",\n                  includes: [\"Spring MVC\", \"Tomcat\", \"Jackson\"]\n              },\n              {\n                  name: \"spring-boot-starter-data-jpa\",\n                  purpose: \"JPA data access\",\n                  includes: [\"Hibernate\", \"Spring Data JPA\", \"Transaction API\"]\n              },\n              {\n                  name: \"spring-boot-starter-security\",\n                  purpose: \"Security features\",\n                  includes: [\"Spring Security\", \"Authentication\", \"Authorization\"]\n              },\n              {\n                  name: \"spring-boot-starter-actuator\",\n                  purpose: \"Production monitoring\",\n                  includes: [\"Health checks\", \"Metrics\", \"Info endpoints\"]\n              }\n          ],\n          embeddedServers: [\"Tomcat\", \"Jetty\", \"Undertow\"],\n          actuatorFeatures: [\n              \"Health checks\",\n              \"Metrics collection\",\n              \"Application information\",\n              \"Environment variables\",\n              \"Logging configuration\",\n              \"Prometheus integration\",\n              \"Grafana compatibility\"\n          ]\n      };\n      \n      this.init();\n  }\n\n  init() {\n      this.createUI();\n      this.setupEventListeners();\n      this.showSection('overview');\n  }\n\n  createUI() {\n      // Create main container\n      const container = document.createElement('div');\n      container.className = 'spring-boot-guide';\n      container.innerHTML = this.getHTML();\n      \n      // Add CSS\n      const style = document.createElement('style');\n      style.textContent = this.getCSS();\n      document.head.appendChild(style);\n      \n      // Add to body\n      document.body.appendChild(container);\n  }\n\n  getHTML() {\n      return `\n          <div class=\"header\">\n              <h1>üçÉ Spring Boot Interactive Guide</h1>\n              <p>Explore Spring Boot features with interactive examples</p>\n          </div>\n          \n          <nav class=\"navigation\">\n              <button class=\"nav-btn active\" data-section=\"overview\">Overview</button>\n              <button class=\"nav-btn\" data-section=\"annotations\">Annotations</button>\n              <button class=\"nav-btn\" data-section=\"starters\">Starters</button>\n              <button class=\"nav-btn\" data-section=\"beans\">Beans & IoC</button>\n              <button class=\"nav-btn\" data-section=\"actuator\">Actuator</button>\n              <button class=\"nav-btn\" data-section=\"demo\">Live Demo</button>\n          </nav>\n          \n          <main class=\"content\">\n              <section id=\"overview\" class=\"section active\">\n                  <h2>Spring Boot Overview</h2>\n                  <div class=\"feature-grid\">\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('autoconfig')\">\n                          <h3>üîß Auto Configuration</h3>\n                          <p>Automatically configures your application based on dependencies</p>\n                      </div>\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('embedded')\">\n                          <h3>üöÄ Embedded Servers</h3>\n                          <p>Built-in Tomcat, Jetty, or Undertow servers</p>\n                      </div>\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('microservices')\">\n                          <h3>üîó Microservices</h3>\n                          <p>Lightweight components for distributed systems</p>\n                      </div>\n                      <div class=\"feature-card\" onclick=\"springGuide.showFeatureDetails('production')\">\n                          <h3>üìä Production Ready</h3>\n                          <p>Built-in monitoring and health checks</p>\n                      </div>\n                  </div>\n                  <div id=\"feature-details\" class=\"details-panel\"></div>\n              </section>\n              \n              <section id=\"annotations\" class=\"section\">\n                  <h2>Spring Boot Annotations</h2>\n                  <div class=\"annotations-list\">\n                      ${this.generateAnnotationsList()}\n                  </div>\n              </section>\n              \n              <section id=\"starters\" class=\"section\">\n                  <h2>Spring Boot Starters</h2>\n                  <div class=\"starters-grid\">\n                      ${this.generateStartersList()}\n                  </div>\n              </section>\n              \n              <section id=\"beans\" class=\"section\">\n                  <h2>Spring Beans & IoC Container</h2>\n                  <div class=\"beans-explanation\">\n                      <div class=\"concept-card\">\n                          <h3>What are Spring Beans?</h3>\n                          <p>Beans are objects managed by the Spring IoC (Inversion of Control) container. They are created, managed, and destroyed by the container according to the defined lifecycle.</p>\n                      </div>\n                      <div class=\"concept-card\">\n                          <h3>Bean Lifecycle</h3>\n                          <div class=\"lifecycle-steps\">\n                              <span class=\"step\">Instantiation</span> ‚Üí \n                              <span class=\"step\">Dependency Injection</span> ‚Üí \n                              <span class=\"step\">Initialization</span> ‚Üí \n                              <span class=\"step\">Usage</span> ‚Üí \n                              <span class=\"step\">Destruction</span>\n                          </div>\n                      </div>\n                      <button class=\"demo-btn\" onclick=\"springGuide.simulateBeanLifecycle()\">\n                          Simulate Bean Lifecycle\n                      </button>\n                      <div id=\"lifecycle-demo\" class=\"lifecycle-visualization\"></div>\n                  </div>\n              </section>\n              \n              <section id=\"actuator\" class=\"section\">\n                  <h2>Spring Boot Actuator</h2>\n                  <div class=\"actuator-features\">\n                      ${this.generateActuatorFeatures()}\n                  </div>\n                  <div class=\"monitoring-demo\">\n                      <h3>Monitoring Dashboard Simulation</h3>\n                      <div class=\"metrics-panel\">\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">Health Status</span>\n                              <span class=\"metric-value\" id=\"health-status\">UP</span>\n                          </div>\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">Memory Usage</span>\n                              <span class=\"metric-value\" id=\"memory-usage\">0%</span>\n                          </div>\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">CPU Usage</span>\n                              <span class=\"metric-value\" id=\"cpu-usage\">0%</span>\n                          </div>\n                          <div class=\"metric\">\n                              <span class=\"metric-name\">Active Threads</span>\n                              <span class=\"metric-value\" id=\"thread-count\">0</span>\n                          </div>\n                      </div>\n                      <button class=\"demo-btn\" onclick=\"springGuide.startMetricsSimulation()\">\n                          Start Monitoring\n                      </button>\n                  </div>\n              </section>\n              \n              <section id=\"demo\" class=\"section\">\n                  <h2>Interactive Spring Boot Demo</h2>\n                  <div class=\"demo-container\">\n                      <div class=\"code-editor\">\n                          <h3>Spring Boot Application</h3>\n                          <textarea id=\"code-input\" placeholder=\"Write your Spring Boot code here...\">\n@SpringBootApplication\npublic class DemoApplication {\n  public static void main(String[] args) {\n      SpringApplication.run(DemoApplication.class, args);\n  }\n}\n\n@RestController\nclass HelloController {\n  @GetMapping(\"/hello\")\n  public String hello() {\n      return \"Hello Spring Boot!\";\n  }\n}</textarea>\n                      </div>\n                      <div class=\"demo-output\">\n                          <h3>Application Output</h3>\n                          <div id=\"demo-result\" class=\"output-panel\">\n                              Click \"Run Application\" to see the output\n                          </div>\n                          <button class=\"demo-btn\" onclick=\"springGuide.runSpringBootDemo()\">\n                              Run Application\n                          </button>\n                      </div>\n                  </div>\n              </section>\n          </main>\n      `;\n  }\n\n  getCSS() {\n      return `\n          .spring-boot-guide {\n              font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n              max-width: 1200px;\n              margin: 0 auto;\n              padding: 20px;\n              background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n              min-height: 100vh;\n              color: #333;\n          }\n          \n          .header {\n              text-align: center;\n              color: white;\n              margin-bottom: 30px;\n              animation: fadeInDown 1s ease-out;\n          }\n          \n          .header h1 {\n              font-size: 2.5rem;\n              margin-bottom: 10px;\n              text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n          }\n          \n          .navigation {\n              display: flex;\n              justify-content: center;\n              flex-wrap: wrap;\n              gap: 10px;\n              margin-bottom: 30px;\n          }\n          \n          .nav-btn {\n              background: rgba(255, 255, 255, 0.1);\n              border: 2px solid rgba(255, 255, 255, 0.3);\n              color: white;\n              padding: 12px 20px;\n              border-radius: 25px;\n              cursor: pointer;\n              transition: all 0.3s ease;\n              backdrop-filter: blur(10px);\n          }\n          \n          .nav-btn:hover, .nav-btn.active {\n              background: rgba(255, 255, 255, 0.9);\n              color: #667eea;\n              transform: translateY(-2px);\n          }\n          \n          .section {\n              background: rgba(255, 255, 255, 0.95);\n              border-radius: 15px;\n              padding: 30px;\n              box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n              display: none;\n              animation: fadeInUp 0.5s ease-out;\n          }\n          \n          .section.active {\n              display: block;\n          }\n          \n          .section h2 {\n              color: #667eea;\n              margin-bottom: 20px;\n              font-size: 2rem;\n          }\n          \n          .feature-grid {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n              gap: 20px;\n              margin-bottom: 20px;\n          }\n          \n          .feature-card {\n              background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n              color: white;\n              padding: 20px;\n              border-radius: 10px;\n              cursor: pointer;\n              transition: all 0.3s ease;\n              text-align: center;\n          }\n          \n          .feature-card:hover {\n              transform: translateY(-5px);\n              box-shadow: 0 15px 30px rgba(0,0,0,0.2);\n          }\n          \n          .details-panel {\n              background: #f8f9fa;\n              padding: 20px;\n              border-radius: 10px;\n              margin-top: 20px;\n              display: none;\n          }\n          \n          .annotation-item {\n              background: #fff;\n              border: 1px solid #e9ecef;\n              border-radius: 8px;\n              padding: 20px;\n              margin-bottom: 15px;\n              transition: all 0.3s ease;\n          }\n          \n          .annotation-item:hover {\n              box-shadow: 0 5px 15px rgba(0,0,0,0.1);\n              transform: translateX(5px);\n          }\n          \n          .annotation-name {\n              color: #667eea;\n              font-weight: bold;\n              font-size: 1.2rem;\n              margin-bottom: 10px;\n          }\n          \n          .code-example {\n              background: #2d3748;\n              color: #e2e8f0;\n              padding: 15px;\n              border-radius: 5px;\n              font-family: 'Monaco', monospace;\n              margin-top: 10px;\n              overflow-x: auto;\n          }\n          \n          .starters-grid {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n              gap: 20px;\n          }\n          \n          .starter-card {\n              background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n              color: white;\n              padding: 20px;\n              border-radius: 10px;\n              transition: all 0.3s ease;\n          }\n          \n          .starter-card:hover {\n              transform: scale(1.05);\n          }\n          \n          .concept-card {\n              background: #fff;\n              border-left: 4px solid #667eea;\n              padding: 20px;\n              margin-bottom: 20px;\n              border-radius: 0 8px 8px 0;\n          }\n          \n          .lifecycle-steps {\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n              margin: 20px 0;\n              flex-wrap: wrap;\n          }\n          \n          .step {\n              background: #667eea;\n              color: white;\n              padding: 8px 15px;\n              border-radius: 20px;\n              font-size: 0.9rem;\n              margin: 5px;\n          }\n          \n          .metrics-panel {\n              display: grid;\n              grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n              gap: 15px;\n              margin: 20px 0;\n          }\n          \n          .metric {\n              background: #fff;\n              padding: 15px;\n              border-radius: 8px;\n              border-left: 4px solid #28a745;\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n          }\n          \n          .metric-value {\n              font-weight: bold;\n              color: #28a745;\n          }\n          \n          .demo-btn {\n              background: #667eea;\n              color: white;\n              border: none;\n              padding: 12px 24px;\n              border-radius: 25px;\n              cursor: pointer;\n              transition: all 0.3s ease;\n              font-size: 1rem;\n              margin: 10px 5px;\n          }\n          \n          .demo-btn:hover {\n              background: #5a67d8;\n              transform: translateY(-2px);\n          }\n          \n          .demo-container {\n              display: grid;\n              grid-template-columns: 1fr 1fr;\n              gap: 20px;\n          }\n          \n          .code-editor textarea {\n              width: 100%;\n              height: 300px;\n              padding: 15px;\n              border: 1px solid #ddd;\n              border-radius: 8px;\n              font-family: 'Monaco', monospace;\n              font-size: 14px;\n              resize: vertical;\n          }\n          \n          .output-panel {\n              background: #2d3748;\n              color: #e2e8f0;\n              padding: 20px;\n              border-radius: 8px;\n              height: 200px;\n              overflow-y: auto;\n              font-family: 'Monaco', monospace;\n          }\n          \n          .lifecycle-visualization {\n              background: #f8f9fa;\n              padding: 20px;\n              border-radius: 8px;\n              margin-top: 15px;\n              min-height: 100px;\n          }\n          \n          @keyframes fadeInDown {\n              from { opacity: 0; transform: translateY(-30px); }\n              to { opacity: 1; transform: translateY(0); }\n          }\n          \n          @keyframes fadeInUp {\n              from { opacity: 0; transform: translateY(30px); }\n              to { opacity: 1; transform: translateY(0); }\n          }\n          \n          @media (max-width: 768px) {\n              .demo-container {\n                  grid-template-columns: 1fr;\n              }\n              \n              .lifecycle-steps {\n                  flex-direction: column;\n                  align-items: flex-start;\n              }\n              \n              .feature-grid {\n                  grid-template-columns: 1fr;\n              }\n          }\n      `;\n  }\n\n  generateAnnotationsList() {\n      return Object.entries(this.springBootData.annotations)\n          .map(([name, info]) => `\n              <div class=\"annotation-item\">\n                  <div class=\"annotation-name\">${name}</div>\n                  <p>${info.description}</p>\n                  <div class=\"code-example\">${info.example}</div>\n              </div>\n          `).join('');\n  }\n\n  generateStartersList() {\n      return this.springBootData.starters\n          .map(starter => `\n              <div class=\"starter-card\">\n                  <h3>${starter.name}</h3>\n                  <p><strong>Purpose:</strong> ${starter.purpose}</p>\n                  <p><strong>Includes:</strong> ${starter.includes.join(', ')}</p>\n              </div>\n          `).join('');\n  }\n\n  generateActuatorFeatures() {\n      return this.springBootData.actuatorFeatures\n          .map(feature => `\n              <div class=\"concept-card\">\n                  <h4>üìä ${feature}</h4>\n                  <p>Essential for monitoring and maintaining applications in production environments.</p>\n              </div>\n          `).join('');\n  }\n\n  setupEventListeners() {\n      // Navigation\n      document.querySelectorAll('.nav-btn').forEach(btn => {\n          btn.addEventListener('click', (e) => {\n              const section = e.target.dataset.section;\n              this.showSection(section);\n          });\n      });\n  }\n\n  showSection(sectionName) {\n      // Hide all sections\n      document.querySelectorAll('.section').forEach(section => {\n          section.classList.remove('active');\n      });\n      \n      // Show selected section\n      document.getElementById(sectionName).classList.add('active');\n      \n      // Update navigation\n      document.querySelectorAll('.nav-btn').forEach(btn => {\n          btn.classList.remove('active');\n      });\n      document.querySelector(`[data-section=\"${sectionName}\"]`).classList.add('active');\n  }\n\n  showFeatureDetails(feature) {\n      const detailsPanel = document.getElementById('feature-details');\n      const details = {\n          autoconfig: {\n              title: \"Auto Configuration\",\n              content: \"Spring Boot automatically configures your application based on the dependencies you have added. For example, if H2 database is on your classpath, Spring Boot will automatically configure an in-memory database.\"\n          },\n          embedded: {\n              title: \"Embedded Servers\",\n              content: \"You can package your Spring Boot application into a self-contained executable JAR or WAR file. Supports Tomcat, Jetty, and Undertow servers out of the box.\"\n          },\n          microservices: {\n              title: \"Microservices Support\",\n              content: \"Spring Boot simplifies microservices development with lightweight components, service discovery, configuration management, and circuit breakers.\"\n          },\n          production: {\n              title: \"Production Ready Features\",\n              content: \"Built-in health checks, metrics collection, application info, and monitoring endpoints. Integrates seamlessly with Prometheus and Grafana.\"\n          }\n      };\n      \n      const detail = details[feature];\n      if (detail) {\n          detailsPanel.innerHTML = `\n              <h3>${detail.title}</h3>\n              <p>${detail.content}</p>\n          `;\n          detailsPanel.style.display = 'block';\n      }\n  }\n\n  simulateBeanLifecycle() {\n      const visualization = document.getElementById('lifecycle-demo');\n      const steps = [\n          \"üèóÔ∏è Bean instantiation started...\",\n          \"üíâ Injecting dependencies...\",\n          \"‚ö° Initializing bean...\",\n          \"‚úÖ Bean ready for use!\",\n          \"üîÑ Bean in active state...\",\n          \"üóëÔ∏è Bean destroyed on context shutdown\"\n      ];\n      \n      visualization.innerHTML = '';\n      let stepIndex = 0;\n      \n      const interval = setInterval(() => {\n          if (stepIndex < steps.length) {\n              const stepDiv = document.createElement('div');\n              stepDiv.textContent = steps[stepIndex];\n              stepDiv.style.cssText = 'padding: 5px 0; opacity: 0; transition: opacity 0.5s;';\n              visualization.appendChild(stepDiv);\n              \n              setTimeout(() => {\n                  stepDiv.style.opacity = '1';\n              }, 100);\n              \n              stepIndex++;\n          } else {\n              clearInterval(interval);\n          }\n      }, 1000);\n  }\n\n  startMetricsSimulation() {\n      const updateMetric = (id, getValue) => {\n          setInterval(() => {\n              document.getElementById(id).textContent = getValue();\n          }, 2000);\n      };\n      \n      updateMetric('memory-usage', () => Math.floor(Math.random() * 30 + 20) + '%');\n      updateMetric('cpu-usage', () => Math.floor(Math.random() * 50 + 10) + '%');\n      updateMetric('thread-count', () => Math.floor(Math.random() * 50 + 10));\n      \n      // Simulate occasional health status changes\n      setInterval(() => {\n          const status = Math.random() > 0.9 ? 'DOWN' : 'UP';\n          const element = document.getElementById('health-status');\n          element.textContent = status;\n          element.style.color = status === 'UP' ? '#28a745' : '#dc3545';\n      }, 5000);\n  }\n\n  runSpringBootDemo() {\n      const code = document.getElementById('code-input').value;\n      const output = document.getElementById('demo-result');\n      \n      // Simulate Spring Boot startup\n      const startupMessages = [\n          \"üöÄ Starting Spring Boot Application...\",\n          \"üì¶ Scanning for components...\",\n          \"üîß Auto-configuring beans...\",\n          \"üåê Starting embedded Tomcat server...\",\n          \"‚úÖ Application started successfully!\",\n          \"\",\n          \"üì° Available endpoints:\",\n          \"  GET /hello - Returns greeting message\",\n          \"  GET /actuator/health - Health check\",\n          \"  GET /actuator/metrics - Application metrics\",\n          \"\",\n          \"üí° Your application is running on http://localhost:8080\"\n      ];\n      \n      output.innerHTML = '';\n      let messageIndex = 0;\n      \n      const interval = setInterval(() => {\n          if (messageIndex < startupMessages.length) {\n              const message = startupMessages[messageIndex];\n              const messageDiv = document.createElement('div');\n              messageDiv.textContent = message;\n              messageDiv.style.marginBottom = '5px';\n              output.appendChild(messageDiv);\n              messageIndex++;\n              output.scrollTop = output.scrollHeight;\n          } else {\n              clearInterval(interval);\n          }\n      }, 500);\n  }\n}\n\n// Initialize the Spring Boot Guide when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  window.springGuide = new SpringBootGuide();\n});\n\n// Export for use in other contexts\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = SpringBootGuide;\n}"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAI,CAACC,wBAAwB,CAAC,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;EACL;EAEAN,MAAMA,CAAA,EAAG;IACL,OAAO;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;EACL;EAEAI,uBAAuBA,CAAA,EAAG;IACtB,OAAOG,MAAM,CAACC,OAAO,CAAC,IAAI,CAACjC,cAAc,CAACK,WAAW,CAAC,CACjD6B,GAAG,CAAC,CAAC,CAAC1B,IAAI,EAAE2B,IAAI,CAAC,KAAK;AACjC;AACA,iDAAiD3B,IAAI;AACrD,uBAAuB2B,IAAI,CAAChC,WAAW;AACvC,8CAA8CgC,IAAI,CAAC7B,OAAO;AAC1D;AACA,WAAW,CAAC,CAAC8B,IAAI,CAAC,EAAE,CAAC;EACnB;EAEAN,oBAAoBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAAC9B,cAAc,CAACO,QAAQ,CAC9B2B,GAAG,CAACG,OAAO,IAAI;AAC1B;AACA,wBAAwBA,OAAO,CAAC7B,IAAI;AACpC,iDAAiD6B,OAAO,CAAC5B,OAAO;AAChE,kDAAkD4B,OAAO,CAAC3B,QAAQ,CAAC0B,IAAI,CAAC,IAAI,CAAC;AAC7E;AACA,WAAW,CAAC,CAACA,IAAI,CAAC,EAAE,CAAC;EACnB;EAEAL,wBAAwBA,CAAA,EAAG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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}